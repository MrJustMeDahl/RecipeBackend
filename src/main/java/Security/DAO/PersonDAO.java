package Security.DAO;

import DTO.PersonDTO;
import Exceptions.APIException;
import Model.Person;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Query;
import jakarta.persistence.TypedQuery;

import java.util.List;

public class PersonDAO extends DAO<PersonDTO, Person> {

    //Singleton
    private static PersonDAO instance;
    private PersonDAO(){}
    public static PersonDAO getInstance(){
        if(instance == null){
            instance = new PersonDAO();
        }
        return instance;
    }

    @Override
    public Person create(PersonDTO personDTO) {
        try (EntityManager em = emf.createEntityManager()){
            em.getTransaction().begin();
            Person person = new Person(personDTO);

            em.persist(person);
            em.getTransaction().commit();
            //Find the autogenerated id for the person and return it to set it in the personDTO
            List<Person> persons = em.createQuery("SELECT p FROM Person p", Person.class).getResultList();
            Person createdPerson = persons.get(persons.size()-1);
            return createdPerson;
        }    }

    @Override
    public Person update(PersonDTO personDTO) {
        try (EntityManager em = emf.createEntityManager()){
            em.getTransaction().begin();
            Person person = em.find(Person.class, personDTO.id);
            person.setName(personDTO.name);
            person.setEmail(personDTO.email);
            person.setRole(personDTO.role);
            em.merge(person);
            em.getTransaction().commit();
            return person;
        }    }

    public Person getPersonByEmailAndPassword(String email, String password) throws APIException{
        try(EntityManager em = emf.createEntityManager()) {
            TypedQuery<Person> namedQuery = em.createNamedQuery("Person.getPersonByEmail", Person.class);
            namedQuery.setParameter("email", email);
            Person foundPerson = namedQuery.getSingleResult();
            if(foundPerson == null){
                throw new APIException(400, "No user with email: " + email + " is found. Please try again.");
            } else if (!foundPerson.verifyPassword(password)){
                throw new APIException(400, "Incorrect password");
            }
            return foundPerson;
        }
    }

    public Person registerPerson(String email, String password, String name, String role) {
        try(EntityManager em = emf.createEntityManager()){
            em.getTransaction().begin();

            Person newPerson = new Person(email, password, name, role);
            em.persist(newPerson);
            em.getTransaction().commit();
            return newPerson;
        }
    }
}
